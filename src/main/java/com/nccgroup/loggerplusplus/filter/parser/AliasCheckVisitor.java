/* Generated By:JavaCC: Do not edit this line. FilterParserDefaultVisitor.java Version 7.0.2 */
package com.nccgroup.loggerplusplus.filter.parser;

import com.nccgroup.loggerplusplus.filter.savedfilter.SavedFilter;
import com.nccgroup.loggerplusplus.filterlibrary.FilterLibraryController;

import java.util.HashSet;

public class AliasCheckVisitor implements FilterParserVisitor{

  private FilterLibraryController filterLibraryController;

  public AliasCheckVisitor(FilterLibraryController filterLibraryController){
    this.filterLibraryController = filterLibraryController;
  }

  public VisitorData defaultVisit(SimpleNode node, VisitorData data){
    node.childrenAccept(this, data);
    return data;
  }
  public VisitorData visit(SimpleNode node, VisitorData data){
    return defaultVisit(node, data);
  }

  public VisitorData visit(SimpleNode node){
    return visit(node, new VisitorData());
  }
  public VisitorData visit(ASTExpression node, VisitorData data){
    return defaultVisit(node, data);
  }
  public VisitorData visit(ASTComparison node, VisitorData visitorData){
    defaultVisit(node, visitorData);
    return visitorData;
  }

  private static String RECURSION_CHECK = "RECURSION_CHECK";
  @Override
  public VisitorData visit(ASTAlias node, VisitorData data) {
    if(filterLibraryController == null){
      data.addError("Cannot use aliases in this context. Filter library controller is not set.");
      return data;
    }
    if(!data.getData().containsKey(RECURSION_CHECK)){
      data.getData().put(RECURSION_CHECK, new HashSet<String>());
    }

    HashSet<String> recursionSet = (HashSet<String>) data.getData().get(RECURSION_CHECK);
    if(recursionSet.contains(node.identifier)){
      //We're recursing, don't continue!
      data.addError("Recursion detected in filter. Alias identifier: " + node.identifier);
      return data;
    }else{
      recursionSet.add(node.identifier);
    }

    //Now sanity check on the aliased filter with our existing data
    boolean foundAliasedFilter = false;
    for (SavedFilter savedFilter : filterLibraryController.getSavedFilters()) {
      if(savedFilter.getName().equalsIgnoreCase(node.identifier) && savedFilter.getFilter() != null){
        visit(savedFilter.getFilter().getAST(), data);
        foundAliasedFilter = true;
        break;
      }
    }

    if(!foundAliasedFilter){
      data.addError("Could not find a filter in the library for alias: " + node.identifier);
    }

    return data;
  }
}
/* JavaCC - OriginalChecksum=b30458d637879c9662107beea18204f0 (do not edit this line) */
