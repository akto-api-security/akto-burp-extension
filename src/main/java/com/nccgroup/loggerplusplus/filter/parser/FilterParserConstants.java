/* Generated By:JJTree&JavaCC: Do not edit this line. FilterParserConstants.java */
package com.nccgroup.loggerplusplus.filter.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FilterParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EQ = 2;
  /** RegularExpression Id. */
  int NEQ = 3;
  /** RegularExpression Id. */
  int GT = 4;
  /** RegularExpression Id. */
  int LT = 5;
  /** RegularExpression Id. */
  int GEQ = 6;
  /** RegularExpression Id. */
  int LEQ = 7;
  /** RegularExpression Id. */
  int OR = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int XOR = 10;
  /** RegularExpression Id. */
  int CONTAINS = 11;
  /** RegularExpression Id. */
  int IN = 12;
  /** RegularExpression Id. */
  int BOOLEAN = 13;
  /** RegularExpression Id. */
  int NUMBER = 14;
  /** RegularExpression Id. */
  int DIGIT = 15;
  /** RegularExpression Id. */
  int REGEXLITERAL_IN_FORWARD_SLASHES = 16;
  /** RegularExpression Id. */
  int REGEX_IN_FORWARD_SLASHES = 17;
  /** RegularExpression Id. */
  int MATCHES = 18;
  /** RegularExpression Id. */
  int LPAREN = 19;
  /** RegularExpression Id. */
  int RPAREN = 20;
  /** RegularExpression Id. */
  int INVERSE = 21;
  /** RegularExpression Id. */
  int DOT = 22;
  /** RegularExpression Id. */
  int IDENTIFIER = 23;
  /** RegularExpression Id. */
  int ARRAY_START = 24;
  /** RegularExpression Id. */
  int ARRAY_END = 25;
  /** RegularExpression Id. */
  int ARRAY_SEPARATOR = 26;
  /** RegularExpression Id. */
  int ALIAS_SYMBOL = 27;
  /** RegularExpression Id. */
  int OPEN_SINGLE_QUOTE_STRING = 28;
  /** RegularExpression Id. */
  int OPEN_DOUBLE_QUOTE_STRING = 29;
  /** RegularExpression Id. */
  int SINGLE_STRING_BODY = 30;
  /** RegularExpression Id. */
  int CLOSE_SINGLE_QUOTE_STRING = 31;
  /** RegularExpression Id. */
  int DOUBLE_STRING_BODY = 32;
  /** RegularExpression Id. */
  int CLOSE_DOUBLE_QUOTE_STRING = 33;
  /** RegularExpression Id. */
  int UNKNOWN = 34;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int SINGLE_QUOTED_STRING = 1;
  /** Lexical state. */
  int DOUBLE_QUOTED_STRING = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "<EQ>",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "<OR>",
    "<AND>",
    "<XOR>",
    "\"CONTAINS\"",
    "\"IN\"",
    "<BOOLEAN>",
    "<NUMBER>",
    "<DIGIT>",
    "<REGEXLITERAL_IN_FORWARD_SLASHES>",
    "<REGEX_IN_FORWARD_SLASHES>",
    "\"MATCHES\"",
    "\"(\"",
    "\")\"",
    "<INVERSE>",
    "\".\"",
    "<IDENTIFIER>",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"#\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "<SINGLE_STRING_BODY>",
    "\"\\\'\"",
    "<DOUBLE_STRING_BODY>",
    "\"\\\"\"",
    "<UNKNOWN>",
  };

}
